# Automation of the Fake rate method workflow
#
# Author: Evan K. Friis, Christian Veelken (UC Davis)
#
# You can substitue a different configuration (cfg) file on the command line.
#
# Example:
# make CFG=fakerate_zttEff.cfg -f Makefile.FakeRateMethod -j 3
#
# You can update all of them at once with the command:
#
# ls fakerate*cfg | xargs -P 5 -I % make -f Makefile.FakeRateMethod -j 2 CFG=%
#
# if you append '-n' to the end, it will just show you what it will do before it
# does it. Note that this will run up to 5 'make's simulataneously, and each
# make instance will use up to two processes at once.
#
# The output directory will have the same name as the cfg file, without the
# suffix.

# Define your numerator, denominator and HLT selection configuration file.  
CFG = fakerate_qcdDiJet1st.cfg
DIR = $(subst .cfg,,${CFG})

# The algorithm to determine fake rates for.
ALGO = shrinking
XML = fakeRateMVADef.xml

# Make the validation plot
${DIR}/validateTauFakeRateKNN_JetPt.png: ../../macros/validateTauFakeRateKNN.C ${DIR}/fakeRate.db 
	cp ../../macros/validateTauFakeRateKNN.C ${DIR}/validateTauFakeRateKNN.C 
	cd ${DIR} && root -b -q 'validateTauFakeRateKNN.C+("train")'

# Train the MVA
${DIR}/fakeRate.db: ${XML} ${DIR}/pass.root ${DIR}/fail.root 
	rm -f $@.temp.db
	cd ${DIR} && mkdir -p train && \
	../trainTauFakeRate_cfg.py xml=../fakeRateMVADef.xml \
	  passing=pass.root \
	  failing=fail.root \
	  outputFile=$(@F).temp.db
	mv $@.temp.db $@

# Build the 'numerator'
${DIR}/pass.root: fakeratemethod_ntuplize.py samples.py samples_cache.py ${DIR}/${CFG}
	mkdir -p ${DIR}
	./fakeratemethod_ntuplize.py -passing --ntuple ${ALGO} \
	  --config ${DIR}/${CFG} --output $@ 

# Build the 'denominator'
${DIR}/fail.root: fakeratemethod_ntuplize.py samples.py samples_cache.py ${DIR}/${CFG}
	mkdir -p ${DIR}
	./fakeratemethod_ntuplize.py -failing --ntuple ${ALGO} \
	  --config ${DIR}/${CFG} --output $@

# Copy the cfg used to select the ntuples into the folder for persistence
${DIR}/${CFG}: ${CFG}
	cp $< $@
